// Code generated by protoc-gen-go. DO NOT EDIT.
// source: football/v1/rpc.proto

package football

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bde48dd725b34ec, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "football.v1.Empty")
}

func init() { proto.RegisterFile("football/v1/rpc.proto", fileDescriptor_7bde48dd725b34ec) }

var fileDescriptor_7bde48dd725b34ec = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xcb, 0xcf, 0x2f,
	0x49, 0x4a, 0xcc, 0xc9, 0xd1, 0x2f, 0x33, 0xd4, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x86, 0x09, 0xeb, 0x95, 0x19, 0x4a, 0x89, 0x21, 0xab, 0x29, 0x49, 0x4d, 0xcc,
	0x85, 0x28, 0x52, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x34, 0x2a, 0xe5, 0x62, 0x73,
	0x4a, 0x4d, 0x2d, 0xc9, 0x49, 0x15, 0x32, 0xe6, 0xe2, 0x70, 0x4f, 0x2d, 0x09, 0x49, 0x4d, 0xcc,
	0x2d, 0x16, 0x12, 0xd2, 0x43, 0x32, 0x44, 0x0f, 0xac, 0x52, 0x4a, 0x10, 0x45, 0x0c, 0xa4, 0xce,
	0x80, 0x51, 0xc8, 0x8c, 0x8b, 0x1d, 0xaa, 0x49, 0x48, 0x02, 0x43, 0x3e, 0x28, 0xb5, 0xb0, 0x34,
	0xb5, 0xb8, 0x04, 0x8b, 0x4e, 0x27, 0xaf, 0x28, 0x8f, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd,
	0xe4, 0xfc, 0x5c, 0xfd, 0xe0, 0x8c, 0xcc, 0xbc, 0x92, 0x44, 0xbf, 0xc4, 0xec, 0xc4, 0xdc, 0x44,
	0xfd, 0xca, 0xd2, 0xec, 0xcc, 0xa4, 0x52, 0xdd, 0xe4, 0x8c, 0xc4, 0xbc, 0xbc, 0xd4, 0x1c, 0xfd,
	0xa4, 0xc4, 0xe4, 0xec, 0xd4, 0xbc, 0x14, 0x90, 0x07, 0x8b, 0xf5, 0x91, 0x7c, 0x63, 0x0d, 0x63,
	0x27, 0xb1, 0x81, 0xbd, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xa6, 0xfe, 0xdd, 0x10,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeetleClient is the client API for Beetle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeetleClient interface {
	GetTeams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Beetle_GetTeamsClient, error)
	GetTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*Team, error)
}

type beetleClient struct {
	cc *grpc.ClientConn
}

func NewBeetleClient(cc *grpc.ClientConn) BeetleClient {
	return &beetleClient{cc}
}

func (c *beetleClient) GetTeams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Beetle_GetTeamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Beetle_serviceDesc.Streams[0], "/football.v1.Beetle/GetTeams", opts...)
	if err != nil {
		return nil, err
	}
	x := &beetleGetTeamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Beetle_GetTeamsClient interface {
	Recv() (*Team, error)
	grpc.ClientStream
}

type beetleGetTeamsClient struct {
	grpc.ClientStream
}

func (x *beetleGetTeamsClient) Recv() (*Team, error) {
	m := new(Team)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *beetleClient) GetTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/football.v1.Beetle/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeetleServer is the server API for Beetle service.
type BeetleServer interface {
	GetTeams(*Empty, Beetle_GetTeamsServer) error
	GetTeam(context.Context, *TeamRequest) (*Team, error)
}

// UnimplementedBeetleServer can be embedded to have forward compatible implementations.
type UnimplementedBeetleServer struct {
}

func (*UnimplementedBeetleServer) GetTeams(req *Empty, srv Beetle_GetTeamsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (*UnimplementedBeetleServer) GetTeam(ctx context.Context, req *TeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}

func RegisterBeetleServer(s *grpc.Server, srv BeetleServer) {
	s.RegisterService(&_Beetle_serviceDesc, srv)
}

func _Beetle_GetTeams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeetleServer).GetTeams(m, &beetleGetTeamsServer{stream})
}

type Beetle_GetTeamsServer interface {
	Send(*Team) error
	grpc.ServerStream
}

type beetleGetTeamsServer struct {
	grpc.ServerStream
}

func (x *beetleGetTeamsServer) Send(m *Team) error {
	return x.ServerStream.SendMsg(m)
}

func _Beetle_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeetleServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/football.v1.Beetle/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeetleServer).GetTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Beetle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "football.v1.Beetle",
	HandlerType: (*BeetleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeam",
			Handler:    _Beetle_GetTeam_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTeams",
			Handler:       _Beetle_GetTeams_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "football/v1/rpc.proto",
}
